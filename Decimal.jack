class Decimal
{
    field bool positive, fraction;
    field Array digits;

    constructor Decimal new(String str)
    {
        var int dot, i;
        let positive = ~CharX.areEqual(str.charAt(0), "-");
        let digits = ArrayX.zeros(19);
        let dot = pointIndex(str);
        let fraction = (dot < str.length());

        let i = dot;
        while (i > 1) {
            let i = i - 1;
            do setDigit(dot - i - 1, CharX.toDigit(str.charAt(i))); }
        if (positive) {
            do setDigit(dot - 1, CharX.toDigit(str.charAt(0))); }

        if (fraction) {
            let i = dot;
            while (i < (str.length() - 1)) {
                let i = i + 1;
                do setDigit(dot - i, CharX.toDigit(str.charAt(i))); } }

        do str.dispose();
        return this;
    }

    constructor Decimal fromInt(int value) 
    {
        var int i;
        let digits = ArrayX.zeros(19);
        let i = 0;
        let positive = (value > -1);
        if (value < 0) {
            let value = -value; }
        while (value > 0) {
            do setDigit(i, mod10(value));
            let value = value / 10;
            let i = i + 1; }
        return this; 
    }

    method int toInt()
    {
        var int value, i;
        let i = 0;
        while (i < (getIntPtr() + 1)) {
            let value = value + (getDigit(i) * pow10(i));
            let i = i + 1; }
        if (~positive) {
            let value = -value; }
        return value;
    }

    method Decimal plus(Decimal other)
    {
        var Decimal result;
        var int intPtr, fracPtr, i;

        if (~positive) {
            do invert();
            let result = other.minus(this);
            do invert();
            return result; }
        if (~other.isPositive()) {
            do other.invert();
            let result = minus(other);
            do other.invert();
            return result; }
        
        let result = copy();
        let intPtr = other.getIntPtr();
        let fracPtr = other.getFracPtr();

        let i = fracPtr;
        while (i < (intPtr + 1)) {
            if(result.getDigit(i) > 9) {
                do result.addToDigit(i, -10);
                do result.addToDigit(i + 1, 1); }
            do result.addToDigit(i, other.getDigit(i));
            if(result.getDigit(i) > 9) {
                do result.addToDigit(i, -10);
                do result.addToDigit(i + 1, 1); } 
            let i = i + 1; }
        
        return result;
    }

    method void add(Decimal other)//
    {
        var int intPtr, fracPtr, i;

        //if (~positive) {
            //... }
        //if (~other.isPositive()) {
            //do other.invert();
            //do sub(other);
            //do other.invert();
            //return; }
        
        let intPtr = other.getIntPtr();
        let fracPtr = other.getFracPtr();

        let i = fracPtr;
        while (i < (intPtr + 1)) {
            if(getDigit(i) > 9) {
                do addToDigit(i, -10);
                do addToDigit(i + 1, 1); }
            do addToDigit(i, other.getDigit(i));
            if(getDigit(i) > 9) {
                do addToDigit(i, -10);
                do addToDigit(i + 1, 1); } 
            let i = i + 1; }
        return;
    }

    method Decimal minus(Decimal other)
    {
        var Decimal result;
        var int intPtr, fracPtr, i;

        if (~positive) {
            do invert();
            let result = plus(other);
            do invert();
            do result.invert();
            return result; }
        if (~other.isPositive()) {
            do other.invert();
            let result = plus(other);
            do other.invert();
            return result; }
        if (other.greater(this)) {
            let result = other.minus(this);
            do result.invert();
            return result; }

        let result = copy();
        let intPtr = other.getIntPtr();
        let fracPtr = other.getFracPtr();

        let i = fracPtr;
        while (i < (intPtr + 1)) {
            if(result.getDigit(i) < 0) {
                do result.addToDigit(i, 10);
                do result.addToDigit(i + 1, -1); }
            do result.addToDigit(i, -other.getDigit(i));
            if(result.getDigit(i) < 0) {
                do result.addToDigit(i, 10);
                do result.addToDigit(i + 1, -1); } 
            let i = i + 1; }
        
        return result;
    }

    method void sub(Decimal other) //
    {
        var int intPtr, fracPtr, i;

        //if (~positive) {
            //do invert();
            //do add(other);
            //do invert();
            //return; }
        //if (~other.isPositive()) {
            //do other.invert();
            //do add(other);
            //do other.invert();
            //return; }
        //if (other.greater(this)) {////////
            //return; }

        let intPtr = other.getIntPtr();
        let fracPtr = other.getFracPtr();

        let i = fracPtr;
        while (i < (intPtr + 1)) {
            if (getDigit(i) < 0) {
                do addToDigit(i, 10);
                do addToDigit(i + 1, -1); }
            do addToDigit(i, -other.getDigit(i));
            if (getDigit(i) < 0) {
                do addToDigit(i, 10);
                do addToDigit(i + 1, -1); } 
            let i = i + 1; }
        
        return;
    }

    method Decimal mult(Decimal other)
    {
        var int exp;
        var Decimal result, term;
        let result = Decimal.new("0");
        let exp = other.getFracPtr();
        while (exp < (other.getIntPtr() + 1)) {
            let term = multByDigit(other.getDigit(exp), exp);
            do result.add(term);
            do term.dispose();
            let exp = exp + 1; }
        if (oneOf(positive, other.isPositive())) {
            do result.invert(); }
        return result;
    }

    method Decimal div(Decimal other)
    {
        var int exp;
        var Decimal remainder, s, result;
        if (other.isZero()) {
            return Decimal.new("-99999999.999999999"); }
        let result = Decimal.fromInt(0);
        let remainder = abs();
        let s = other.abs();
        let exp = getExp() - other.getExp();
        do s.shift(exp);


        while ((exp > -10) & (~(s.isZero()))) { 
            while (remainder.greaterOrEq(s)) {
                do remainder.sub(s);
                do result.addToDigit(exp, 1); }
            let exp = exp - 1;
            do s.shift(-1); }
        if (oneOf(isPositive(), other.isPositive())) {
            do result.invert(); }
        do remainder.dispose();
        do s.dispose();
        return result;
    }

    method Decimal multByDigit(int digit, int exp)
    {
        var int i;
        var Decimal result;
        let result = Decimal.new("0");
        let i = Math.max(getFracPtr() + exp, -9);
        while (i < (getIntPtr() + 1 + exp)) {
            do result.addToDigit(i, getDigit(i - exp) * digit);
            do result.addToDigit(i + 1, result.getDigit(i) / 10);
            do result.setDigit(i, mod10(result.getDigit(i)));
            let i = i + 1; }
        return result;
    }

    method Decimal pow(int p)
    {
        var Decimal factor, result;
        var int i;
        let i = 0;
        let result = copy();
        while (i < (p - 1)) {
            let factor = result.mult(this);
            do result.dispose();
            let result = factor;
            let i = i + 1; }
        return result;
    }

    method bool greater(Decimal other) 
    {
        var int i;
        let i = Math.max(getIntPtr(), other.getIntPtr());
        while (i > -10) {
            if (getDigit(i) > other.getDigit(i)) {
                return true; }
            if (getDigit(i) < other.getDigit(i)) {
                return false; }
            let i = i - 1; }
        return false;
    }

    method bool greaterOrEq(Decimal other) 
    {
        var int i;
        let i = Math.max(getIntPtr(), other.getIntPtr());
        while (i > -10) {
            if (getDigit(i) > other.getDigit(i)) {
                return true; }
            if (getDigit(i) < other.getDigit(i)) {
                return false; }
            let i = i - 1; }
        return true;
    }

    method String toString()
    {   
        var String result;
        var int i;
        let result = String.new(21);

        if (~positive) {
            do StringX.appendTo(result, "-"); }
        
        let i = getIntPtr();
        while (i > (getFracPtr() - 1)) {
            if (i = -1) {
                do StringX.appendTo(result, "."); }
            do result.appendChar(CharX.fromDigit(getDigit(i)));
            let i = i - 1; }
        
        return result;
    }

    method void print()
    {
        var String str;
        let str = toString();
        do Output.printString(str);
        do str.dispose();
        return;
    }

    method Decimal abs() 
    { 
        var Decimal result;
        if (~positive) {
            do invert(); 
            let result = copy();
            do invert();
            return result; }
        return copy();
    }

    method Decimal copy() 
    { 
        var Decimal result;
        var String str;
        let str = toString();
        let result = Decimal.new(str);
        do str.dispose();
        return result;
    }

    method void invert() { let positive = ~positive; return; }

    method Decimal opposite() 
    { 
        var Decimal result;
        do invert();
        let result = copy();
        do invert();
        return result;
    }

    method int pointIndex(String str) 
    {
        var int i;
        let i = 0;
        while (i < str.length()) {
            if (CharX.areEqual(str.charAt(i), ".")) {
                return i; }
            let i = i + 1; }
        return i;
    }

    method bool isPositive() { return positive; }
    method bool isFraction() { return fraction; }
    method bool isZero() { return (getIntPtr() = 0) & (getFracPtr() = 0) & (getDigit(0) = 0); }

    method int getIntPtr() 
    {
        var int i;
        let i = 10;
        while (i > 0) {
            let i = i - 1;
            if (getDigit(i) > 0) {
                return i; } }
        return i;
    }

    method int getFracPtr() 
    {
        var int i;
        let i = -10;
        while (i < 0) {
            let i = i + 1;
            if (getDigit(i) > 0) {
                return i; } }
        return i;
    }

    method int getExp() 
    {
        var int i;
        let i = 9;
        while (i > -9) {
            if (getDigit(i) > 0) {
                return i; }
            let i = i - 1; } 
        return -9;
    }

    method void shift(int pos) 
    {
        var int i;
        if (pos > 0) {
            let i = 9 - pos;
            while (i > -10) {
                do setDigit(i + pos, getDigit(i));
                let i = i - 1; }
            let i = 0;
            while (i < pos) {
                do setDigit(-9 + i, 0); 
                let i = i + 1; } }
        if (pos < 0) {
            let i = -9 - pos;
            while (i < 10) {
                do setDigit(i + pos, getDigit(i));
                let i = i + 1; }
            let i = 0;
            while (i > pos) {
                do setDigit(9 + i, 0); 
                let i = i - 1; } }
        return;
    }

    method int getDigit(int i) { return digits[9-i]; }
    method void setDigit(int i, int value) { let digits[9-i] = value; return; }
    method void addToDigit(int i, int value) { let digits[9-i] = digits[9-i] + value; return; }

    method int mod10(int n) { return n - (n / 10 * 10); }
    method int pow10(int n) { 
        if (n = 0) { return 1; }
        if (n = 1) { return 10; }
        if (n = 2) { return 100; }
        if (n = 3) { return 1000; }
        return 10000; }
    method boolean oneOf(boolean a, boolean b) { return (a | b) & ~(a & b); }

    method void dispose() 
    {
        do Memory.deAlloc(this);
        do digits.dispose();
        return;
    }
}
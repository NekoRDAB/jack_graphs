class Expression 
{
    field DStack stack;
    field Array actions, actionTypes;

    constructor Expression new(String str)//
    {
        var String value;
        var int actionPtr, i;
        var Char c;

        let stack = DStack.new(10);
        let actions = ArrayX.zeros(30);
        let actionPtr = 0;
        let actionTypes = ArrayX.zeros(30);

        let i = 0;
        let value = String.new(15);
        while (i < str.length()) {
            let c = str.charAt(i);
            if (CharX.areEqual(c, ".") | CharX.isDigit(c)) {
                do value.appendChar(c);
                let c = str.charAt(i + 1); 
                if (~(CharX.areEqual(c, ".") | CharX.isDigit(c))) {
                    let actions[actionPtr] = Decimal.new(value);
                    let value = String.new(15);
                    let actionTypes[actionPtr] = 1;
                    let actionPtr = actionPtr + 1; } }//minus error
            if (CharX.areEqual(c, "X")) {
                let actionTypes[actionPtr] = 3;
                let actionPtr = actionPtr + 1; }
            if (CharX.areEqual(c, "+")) {
                let actions[actionPtr] = 0;
                let actionTypes[actionPtr] = 2;
                let actionPtr = actionPtr + 1; }
            if (CharX.areEqual(c, "-")) {
                let actions[actionPtr] = 1;
                let actionTypes[actionPtr] = 2;
                let actionPtr = actionPtr + 1; }
            if (CharX.areEqual(c, "*")) {
                let actions[actionPtr] = 2;
                let actionTypes[actionPtr] = 2;
                let actionPtr = actionPtr + 1; }
            if (CharX.areEqual(c, "^")) {
                let actions[actionPtr] = 3;
                let actionTypes[actionPtr] = 2;
                let actionPtr = actionPtr + 1; }
            if (CharX.areEqual(c, "/")) {
                let actions[actionPtr] = 4;
                let actionTypes[actionPtr] = 2;
                let actionPtr = actionPtr + 1; }
            let i = i + 1; }
        return this;
    }

    method Decimal eval(Decimal x)  //
    {
        var int i;
        var Decimal val, val1, val2, res;

        let i = 0;
        while (actionTypes[i] > 0) 
        {
            if (actionTypes[i] = 1) {
                let val = actions[i];
                do stack.Push(val.copy()); }
            
            if (actionTypes[i] = 2) {
                let val2 = stack.Pop();
                let val1 = stack.Pop();
                if (actions[i] = 0) {
                    let res = val1.plus(val2); }
                if (actions[i] = 1) {
                    let res = val1.minus(val2); }
                if (actions[i] = 2) {
                    let res = val1.mult(val2); }
                if (actions[i] = 3) {
                    let res = val1.pow(val2.toInt()); }
                if (actions[i] = 4) {
                    let res = val1.div(val2); }
                do stack.Push(res); 
                do val1.dispose();
                do val2.dispose(); }
            
            if (actionTypes[i] = 3) {
                do stack.Push(x.copy()); }
            
            let i = i + 1; 
        }
        return stack.Pop();
    }
}